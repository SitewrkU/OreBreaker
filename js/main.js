import * as data from './data.js';
import { inventory, pickaxes } from './data.js';
import {
  RenderDropList,
  updateInventory,
  RenderCrafts,
  updatePickaxesList,
} from './render.js';
import { RenderCurrPickaxe } from './game/pickaxes.js';
import { UpdateCraftListColors } from './game/craft.js';
import { RenderSells, RenderBuys } from './game/shop/shop.js';

const StoneImg = document.querySelector(".stone-img");
const OreName = document.querySelector(".ore-name");
const ProgressBar = document.getElementById("stoneProgress");
const ProgrsIndicate = document.querySelector(".progress-indicate");
const ShowPowerSpan = document.getElementById("powerToDestroySpan");
const SkipButton = document.querySelector(".skip-button");
const pickaxeContainer = document.getElementById("pickaxelabel");

const breakSound = new Audio('../src/sounds/pickaxe-break.mp3');
breakSound.load(); 

let canSkipOre = false;

export let CurrentOre = null; //–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —ñ–Ω—à–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π —è–∫–∏–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ —Ç–æ—á–Ω—É —Ä—É–¥—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥—Ä–æ–ø—É
export const state = {
  CurrentPickaxe: structuredClone(data.items.stonePickaxe),
  CurrentRecipe: null,
};
let clicks = 0;


let lastDropList = [];
function noDropSet(){
  lastDropList = [];
  lastDropList.push({
    name: "nodrop",
  });
  RenderDropList(lastDropList);
}


//–ú—ñ—Ü–Ω—ñ—Å—Ç—å —Ä—É–¥–∏
let maxHealth = 20;
let health = maxHealth;
ProgressBar.max = maxHealth;
ProgressBar.value = health;
function updateProgress(){
  ProgrsIndicate.textContent = `${health.toFixed(1)}/${maxHealth}`;
  ProgressBar.max = maxHealth;
  ProgressBar.value = health;
}


//–ó–º—ñ–Ω–Ω—ñ —è–∫—ñ –∫–æ–ª–∏—Å—å –±—É–¥—É—Ç—å –∑–∞—ñ–º–Ω–µ–Ω—ñ
let MineType = data.Mines[0].ores;
console.log("–¢–∏–ø —à–∞—Ö—Ç–∏", MineType)


//–ö–Ü–ù–ï–¶–¨ –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨ -----------------------------------------



export function StoneClick(gendrop = true){
  if (!state.CurrentPickaxe || !state.CurrentPickaxe.pickaxe) {
    console.warn("–î–µ —Ç–≤—ñ–π —ñ—Å–Ω—Ç—Ä—É–º–µ–Ω—Ç? üëã");
    pickaxeContainer.classList.add('noPickaxe')
    setTimeout(() => {  pickaxeContainer.classList.remove('noPickaxe');  }, 200);
    return;
  }

  health -= state.CurrentPickaxe.pickaxe.value;
  updateProgress();
  if (health <= 0) {
    if(state.CurrentPickaxe.pickaxe.power >= CurrentOre.powerToDestr){
      if(gendrop){
        OreDrop(CurrentOre);
      }
    }else{
      noDropSet();
    }
    GenerateOre();
  }
}


//1-–∏–π –µ—Ç–∞–ø –≤ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä—É–¥–∏ (–†–æ–∑–¥—ñ–ª–µ–Ω–æ —â–æ–± –Ω–µ –≤—ñ–¥–Ω—ñ–º–∞—Ç–∏ —Ö–ø –≤ –∫—ñ—Ä–∫–∏ –ø—Ä–∏ —Å–∫—ñ–ø—ñ)
function GenerateOre(){
  GenerateOreRNG();

  if(state.CurrentPickaxe){
    state.CurrentPickaxe.pickaxe.durability--;
    if(state.CurrentPickaxe.pickaxe.durability <= 0){
      breakSound.currentTime = 0; 
      breakSound.play();
      state.CurrentPickaxe = null;
      RenderCurrPickaxe();
    }
  }

  canSkipOre = true;
  SkipButton.classList.add('Skippable');
}

//–î—Ä—É–≥–∏–π –µ—Ç–∞–ø –∑ –ø—Ä–æ–ø—É—Å–∫–æ–º –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è
function GenerateOreRNG(){
  const random = Math.random() * 100;
  let sum = 0;
  
  for (let ore of MineType) {
    sum += ore.chance;
    if (random <= sum) {
      CurrentOre = ore;

      StoneImg.src = ore.src;
      OreName.textContent = ore.name
      ShowPowerSpan.textContent = ore.powerToDestr;
      ShowPowerSpan.classList.toggle(
        'candestroy',
        state.CurrentPickaxe?.pickaxe?.power >= ore.powerToDestr
      );

      maxHealth = ore.health;
      health = maxHealth;
      updateProgress();

      console.log("–Ü–Ω–≤–µ–Ω—Ç–∞—Ä:", inventory);
      break;
    }
  }
}



//–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥—Ä–æ–ø–∞ –∑ —Ä—É–¥–∏ -----------------------------------------------------------
function OreDrop(ore) {
  lastDropList = [];
  ore.drop?.forEach(drop => {
    drop.chance.forEach(chanceObj => {
      const randomRoll = Math.random() * 100;

      if (randomRoll <= chanceObj.dropChance) {
        const amount = getRandomInt(chanceObj.minCount, chanceObj.maxCount);

        // –ß–∏ —î —Ç–∞–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ
        const existing = inventory.find(item => item.name === drop.name);

        if (existing) {
          existing.amount += amount;
        } else {
          inventory.push({
            name: drop.name,
            src: drop.src,
            amount: amount
          });
        }

        lastDropList.push({
          name: drop.name,
          src: drop.src,
          amount: amount
        });
      }
    });
  });
  RenderDropList(lastDropList);
  updateInventory();
  UpdateCraftListColors(state.CurrentRecipe);
}
function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}



//–ü–†–û–ü–£–°–¢–ò–¢–ò –†–£–î–£
SkipButton.addEventListener("click", () => {
  if(canSkipOre){
    canSkipOre = false;
    SkipButton.classList.remove('Skippable');
    GenerateOreRNG();

    //–û—á–∏—Å—Ç–∏—Ç–∏ –ª–∞—Å—Ç –¥—Ä–æ–ø —è–∫—â–æ —Å–∫—ñ–ø
    noDropSet();
    
  }else{
    console.log('–¥–∏–Ω–∞—Ö—É');
  }
});


updateInventory();
GenerateOre();
RenderCrafts();
RenderCurrPickaxe();
updatePickaxesList();
RenderSells();
RenderBuys();